#!/bin/bash
# {{ ansible_managed }}
# Daemonizes and manages a Thermos observer process.

function usage {
  err "Controls the Thermos observer process."
  err "Usage: ${0} (start|stop|status)"
}

function msg {
  out "$*" >&2;
}

function err {
  local x=${?};
  msg "$*";
  return $(( ${x} == 0 ? 1 : ${x} ));
}

function out {
  printf '%s\n' "$*";
}

# Source function library.
. /lib/lsb/init-functions

# Get a sane screen width
[ -z "${COLUMNS:-}" ] && COLUMNS=80
[ -z "${CONSOLETYPE:-}" ] && CONSOLETYPE="$(/sbin/consoletype)"

# Read in init configuration.
if [ -z "${BOOTUP:-}" ]; then
  if [ -f /etc/sysconfig/init ]; then
    . /etc/sysconfig/init
  else
    BOOTUP=color
    RES_COL=60
    MOVE_TO_COL="echo -en \\033[${RES_COL}G"
    SETCOLOR_SUCCESS="echo -en \\033[1;32m"
    SETCOLOR_FAILURE="echo -en \\033[1;31m"
    SETCOLOR_WARNING="echo -en \\033[1;33m"
    SETCOLOR_NORMAL="echo -en \\033[0;39m"
    LOGLEVEL=1
  fi
  if [ "$CONSOLETYPE" = "serial" ]; then
    BOOTUP=serial
    MOVE_TO_COL=
    SETCOLOR_SUCCESS=
    SETCOLOR_FAILURE=
    SETCOLOR_WARNING=
    SETCOLOR_NORMAL=
  fi
fi

function echo_success {
  [ "$BOOTUP" = "color" ] && $MOVE_TO_COL
  echo -n "["
  [ "$BOOTUP" = "color" ] && $SETCOLOR_SUCCESS
  echo -n $"  OK  "
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo -n "]"
  echo -ne "\r"
  return 0
}

function echo_failure {
  [ "$BOOTUP" = "color" ] && $MOVE_TO_COL
  echo -n "["
  [ "$BOOTUP" = "color" ] && $SETCOLOR_FAILURE
  echo -n $"FAILED"
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo -n "]"
  echo -ne "\r"
  return 1
}

# Parse arguments.
ACTION=${1}

# Ensures that action is.
if [ -z ${ACTION} ]; then
  err "ERROR: No action specified."
  usage
  exit -1
fi

STATE_DIR='{{ thermos_state_dir }}'
LOG_DIR='{{ thermos_log_dir }}'

function start {
  echo -n $"Starting Thermos observer: "
  start_daemon daemonize -p "${STATE_DIR}/observer.pid" -e "${LOG_DIR}/stderr.log" {{ thermos_bin_dir }}/{{ thermos_version }}/observer_startup
  retval=$?
  [ $retval -eq 0 ] && (echo_success; touch ${STATE_DIR}/observer.lock) || echo_failure
  echo
  return $retval
}

function stop {
  echo -n $"Stopping Thermos observer: "
  killproc -p "${STATE_DIR}/observer.pid" /usr/local/sbin/thermos_observer.pex
  retval=$?
  [ $retval -eq 0 ] && (echo_success; rm -f ${STATE_DIR}/observer.lock) || echo_failure
  echo
  return $retval
}

function restart {
  stop
  start
}

function rh_status {
  pid=$(pidofproc -p ${STATE_DIR}/observer.pid /usr/local/sbin/thermos_observer.pex)
  if [ $? -eq 0 ]; then
    echo "Thermos observer (pid ${pid}) is running on port {{ thermos_observer_port }}..."
    return 0
  else
    if [ -e ${STATE_DIR}/observer.lock ]; then
      echo "Thermos observer process dead but lockfile exists"
      return 2
    else
      echo "Thermos observer is stopped"
      return 1
    fi
  fi
}

rh_status_q() {
  rh_status >/dev/null 2>&1
}

# Executes the requested daemon action.
case "${ACTION}" in
  start)
    rh_status_q && rh_status && exit 0
    start
    ;;
  stop)
    stop
    ;;
  status)
    rh_status
    ;;
  restart)
    restart
    ;;
  *)
    err "ERROR: Invalid action specified."
    usage
    exit -3
esac

exit $?
