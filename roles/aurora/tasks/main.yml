---
- name: Ensure that cluster name is an a templatable state
  set_fact:
    safe_aurora_cluster_name: "{{ aurora_cluster_name | regex_replace(' ', '_') }}"
    aurora_replicated_log_node: "{{ aurora_schedulers.split(',')[0] }}"
  tags:
    - aurora

- name: Ensure that the Aurora directories exist
  file:
    path: "{{ item }}"
    state: directory
    owner: aurora
    group: aurora
    recurse: yes
  with_items:
    - "{{ aurora_bin_dir }}/{{ safe_aurora_cluster_name }}"
    - "{{ aurora_log_dir }}/{{ safe_aurora_cluster_name }}"
    - "{{ aurora_conf_dir }}/{{ safe_aurora_cluster_name }}"
    - "{{ aurora_state_dir }}/{{ safe_aurora_cluster_name }}"
    - "{{ aurora_state_dir }}/{{ safe_aurora_cluster_name }}/{{ aurora_backup_path }}"
    - "{{ aurora_lib_dir }}/{{ aurora_version }}"
  tags:
    - aurora

- name: Ensure that the Aurora Yum repository is present
  template:
    src: ssalevan_aurora.repo.j2
    dest: /etc/yum.repos.d/ssalevan_aurora.repo
    mode: 0644
  tags:
    - aurora

- name: Install Aurora scheduler RPM
  yum:
    name: aurora
    state: present
    enablerepo: ssalevan_aurora
  when: '"scheduler" in aurora_roles'
  tags:
    - aurora

# - name: Install Aurora client RPM
#   yum:
#     name: aurora-client
#     state: present
#     enablerepo: ssalevan_aurora
#   when: '"client" in aurora_roles'
#   tags:
#     - aurora

- name: Template Aurora ZooKeeper quorum file
  template:
    src: zk.j2
    dest: "{{ aurora_conf_dir }}/{{ safe_aurora_cluster_name }}/zk"
  tags:
    - aurora
    - aurora_config

- name: Ensure that the Aurora replicated log has been initialized
  command: "mesos-log initialize --path='{{ aurora_state_dir }}/{{ safe_aurora_cluster_name }}/{{ aurora_native_log_path }}'"
  args:
    creates: "{{ aurora_state_dir }}/{{ safe_aurora_cluster_name }}/{{ aurora_native_log_path }}"
  delegate_to: "{{ aurora_replicated_log_node }}"
  when: aurora_schedulers != '127.0.0.1'
  tags:
    - aurora

- name: Ensure that the Aurora replicated log has been initialized
  command: "mesos-log initialize --path='{{ aurora_state_dir }}/{{ safe_aurora_cluster_name }}/{{ aurora_native_log_path }}'"
  args:
    creates: "{{ aurora_state_dir }}/{{ safe_aurora_cluster_name }}/{{ aurora_native_log_path }}"
  when: aurora_schedulers == '127.0.0.1'
  tags:
    - aurora

- name: Setup the Aurora scheduler's sysconfig
  template:
    src: aurora.sysconfig.j2
    dest: /etc/sysconfig/aurora
  when: '"scheduler" in aurora_roles'
  tags:
    - aurora
    - aurora_config

- name: Ensure that the Aurora service is running
  service:
    name: aurora
    state: started
  tags:
    - aurora

- name: Setup a site-specific Aurora Monit configuration
  template:
    src: aurora.monit.j2
    dest: "/etc/monit.d/aurora-scheduler"
  register: aurora_monit
  tags:
    - aurora
    - aurora_config

- name: Ensure that Monit is loaded with latest configuration
  service:
    name: monit
    state: reloaded
  when: aurora_monit.changed
  tags:
    - aurora
    - aurora_config

- name: Wait for Monit to get its act together
  pause:
    seconds: 10
  when: aurora_monit.changed
  tags:
    - aurora
    - aurora_config

- name: Ensure that Aurora is monitored by Monit
  monit:
    name: aurora
    state: monitored
  tags:
    - aurora
    - aurora_config

- name: Template a cluster configuration file for Aurora client binaries
  template:
    src: clusters.json.j2
    dest: "{{ aurora_conf_dir }}/clusters.json"
  when: "'client' in aurora_roles"
  tags:
    - aurora
    - aurora_client
